#========================================
# General properties
#========================================
server.name=https://%(hostname)s
server.prefix=${server.name}/cas
 
# IP address or CIDR subnet allowed to access the /status URI of CAS that exposes health check information
cas.securityContext.status.allowedSubnet=127.0.0.1

# Unique CAS node name
host.name=%(hostname)s

cas.themeResolver.defaultThemeName=cas-theme-default
cas.viewResolver.basename=default_views

#========================================
# OpenID properties
#========================================
openid.issuer=https://%(hostname)s
openid.provider=${openid.issuer}/.well-known/openid-configuration
openid.redirect-uri=${openid.issuer}/cas/login

#=======================================
# Memcached connection configuration
#=======================================
memcached.servers=127.0.0.1:11211

#========================================
# Password Policy
#========================================
# Warn all users of expiration date regardless of warningDays value.
password.policy.warnAll=false

# Threshold number of days to begin displaying password expiration warnings.
password.policy.warningDays=30

# URL to which the user will be redirected to change the passsword.
password.policy.url=

#========================================
# LDAP authentication properties
#========================================
ldap.url=ldaps://localhost:1636
 
# Base DN of users to be authenticated
ldap.baseDn=ou=people,o=%(inumOrg)s,o=gluu
 
# LDAP connection timeout in milliseconds
ldap.connectTimeout=3000
 
# Whether to use StartTLS (probably needed if not SSL connection)
ldap.useStartTLS=false
 
# SSL certificate of LDAP directory to trust
ldap.trustedCert=file:%(openDjCertFn)s
 
# Manager credential DN
ldap.managerDn=cn=Directory Manager
 
# Manager credential password
ldap.managerPassword=%(ldapPass)s
 
#========================================
# Local LDAP Entry resolver properties
#========================================
ldap.local.url=ldaps://localhost:1636
 
# Base DN of users to be authenticated
ldap.local.baseDn=ou=people,o=%(inumOrg)s,o=gluu
 
# LDAP connection timeout in milliseconds
ldap.local.connectTimeout=3000
 
# Whether to use StartTLS (probably needed if not SSL connection)
ldap.local.useStartTLS=false
 
# SSL certificate of LDAP directory to trust
ldap.local.trustedCert=file:%(openDjCertFn)s
 
# Manager credential DN
ldap.local.managerDn=cn=Directory Manager
 
# Manager credential password
ldap.local.managerPassword=%(ldapPass)s

#========================================
# LDAP connection pool configuration
#========================================
ldap.pool.minSize=1
ldap.pool.maxSize=10
ldap.pool.validateOnCheckout=false
ldap.pool.validatePeriodically=true
 
# before giving up.
ldap.pool.blockWaitTime=3000
 
# Frequency of connection validation in seconds
# Only applies if validatePeriodically=true
ldap.pool.validatePeriod=300
 
# Attempt to prune connections every N seconds
ldap.pool.prunePeriod=300
 
# Maximum amount of time an idle connection is allowed to be in
# pool before it is liable to be removed/destroyed
ldap.pool.idleTime=600
 
#========================================
# Authentication
#========================================
ldap.authn.searchFilter=(uid={user})
 
#========================================
# User Details
#========================================
ldap.role.baseDn=ou=people,o=%(inumOrg)s,o=gluu
ldap.role.searchFilter=(member={0})
ldap.user.searchFilter=(uid={0})
 
#========================================
# Registered Service
#========================================
ldap.service.baseDn=ou=people,o=%(inumOrg)s,o=gluu
